const fs = require('fs')
const path = require('path')

// üìå –§—É–Ω–∫—Ü–∏—è –¥–ª—è —á—Ç–µ–Ω–∏—è –ø—É—Ç–∏ –∏–∑ `dir.txt`
function getDirectoryPath(filePath) {
  try {
    return fs.readFileSync(filePath, 'utf-8').trim()
  } catch (error) {
    console.error(`–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ ${filePath}:`, error.message)
    process.exit(1)
  }
}

// üìå –§—É–Ω–∫—Ü–∏—è —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ–≥–æ –æ–±—Ö–æ–¥–∞ —Ñ–∞–π–ª–æ–≤ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
function getAllFiles(dirPath) {
  let filesList = []

  function traverseDirectory(currentPath) {
    const files = fs.readdirSync(currentPath)
    for (const file of files) {
      const fullPath = path.join(currentPath, file)
      const stats = fs.statSync(fullPath)

      if (stats.isDirectory()) {
        traverseDirectory(fullPath)
      } else if (stats.isFile()) {
        filesList.push(fullPath)
      }
    }
  }

  traverseDirectory(dirPath)
  return filesList
}

// üìå –§—É–Ω–∫—Ü–∏—è –ø–æ–¥—Å—á—ë—Ç–∞ —Å—Ç—Ä–æ–∫ –≤ —Ñ–∞–π–ª–µ
function countFileLines(filePath) {
  try {
    const content = fs.readFileSync(filePath, 'utf-8')
    return content.split(/\r?\n/).length
  } catch (error) {
    console.error(`–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ ${filePath}:`, error.message)
    return 0
  }
}

// üìå –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞
const directoryFilePath = 'dir.txt' // üìå –§–∞–π–ª —Å –ø—É—Ç—ë–º –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
const directoryPath = getDirectoryPath(directoryFilePath)
const allFiles = getAllFiles(directoryPath)

// –ü–æ–¥—Å—á—ë—Ç —Å—Ç—Ä–æ–∫ –≤–æ –≤—Å–µ—Ö —Ñ–∞–π–ª–∞—Ö
const fileLineCounts = allFiles.map(file => ({
  path: file,
  lines: countFileLines(file),
}))

// üìå –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É–±—ã–≤–∞–Ω–∏—é —Å—Ç—Ä–æ–∫ –∏ –≤—ã–≤–æ–¥–∏–º —Ç–æ–ø-10 —Å–∞–º—ã—Ö –¥–ª–∏–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
const topFiles = fileLineCounts.sort((a, b) => b.lines - a.lines).slice(0, 10)

console.log('\nüìå –¢–æ–ø-10 —Å–∞–º—ã—Ö –¥–ª–∏–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤:')
topFiles.forEach((file, index) => {
  console.log(`${index + 1}. ${file.path} - ${file.lines} —Å—Ç—Ä–æ–∫`)
})
